syntax = "proto3";
package specs;

option go_package = "github.com/siderolabs/omni/client/api/omni/specs";

import "talos/machine/machine.proto";
import "google/protobuf/timestamp.proto";

// AuthConfigSpec describes the authentication configuration.
message AuthConfigSpec {
  message Auth0 {
    bool enabled = 1;
    string domain = 2;
    string client_id = 3;
    bool useFormData = 4;
  }

  message Webauthn {
    bool enabled = 1;
    bool required = 2;
  }

  message SAML {
    bool enabled = 1;
    string url = 2;
    string metadata = 3;
    // LabelRules defines custom rules on how to extract SAML attributes from the
    // saml assertion and turn them into labels.
    map<string, string> label_rules = 4;
    string name_id_format = 5;
  }

  Auth0 auth0 = 1;
  Webauthn webauthn = 2;
  bool suspended = 3;
  SAML saml = 4;
}

// SAMLAssertionSpec describes SAML assertion.
message SAMLAssertionSpec {
  // Data keeps JSON encoded SAML assertion.
  bytes data = 1;

  // Email is the identity that was read from the assertion.
  string email = 2;

  // Used marks SAML assertion as used.
  bool used = 3;
}

// UserSpec describes a user.
message UserSpec {
  reserved 1;
  // Scopes are deprecated, use roles instead.
  //
  // Deprecated: will be removed once all environments are migrated to use roles.
  // TODO: remove after all environments are migrated to use roles.
  repeated string scopes = 2;
  string role = 3;
}

// IdentitySpec describes a user identity.
message IdentitySpec {
  string user_id = 1;
}

message Identity {
  string email = 1;
}

// PublicKeySpec describes a user or service account public key.
message PublicKeySpec {
  bytes public_key = 1;
  // Scopes are deprecated, use roles instead.
  //
  // Deprecated: will be removed once all environments are migrated to use roles.
  // TODO: remove after all environments are migrated to use roles.
  repeated string scopes = 2;
  google.protobuf.Timestamp expiration = 3;
  bool confirmed = 4;
  Identity identity = 5;
  string role = 6;
}

// AccessPolicyUserGroup describes a user group in the ACLs context.
message AccessPolicyUserGroup {
  message User {
    string name = 1;
    string match = 2;
    repeated string label_selectors = 3;
  }

  repeated User users = 1;
}

// AccessPolicyClusterGroup describes a cluster group in the ACLs context.
message AccessPolicyClusterGroup {
  message Cluster {
    string name = 1;
    string match = 2;
  }

  repeated Cluster clusters = 1;
}

// AccessPolicyRule describes a rule in the ACLs context.
message AccessPolicyRule {
  message Kubernetes {
    message Impersonate {
      repeated string groups = 1;
    }

    Impersonate impersonate = 1;
  }

  repeated string users = 1;
  repeated string clusters = 2;
  Kubernetes kubernetes = 3;
  string role = 4;
}

message AccessPolicyTest {
  message Expected {
    message Kubernetes {
      message Impersonate {
        repeated string groups = 1;
      }

      Impersonate impersonate = 1;
    }

    Kubernetes kubernetes = 1;
    string role = 2;
  }

  message User {
    string name = 1;
    map<string, string> labels = 2;
  }

  message Cluster {
    string name = 1;
  }

  string name = 1;
  User user = 2;
  Cluster cluster = 3;
  Expected expected = 4;
}

// AccessPolicySpec describes the access policy configuration.
message AccessPolicySpec {
   map<string, AccessPolicyUserGroup> user_groups = 1;
   map<string, AccessPolicyClusterGroup> cluster_groups = 2;
   repeated AccessPolicyRule rules = 3;
   repeated AccessPolicyTest tests = 4;
}

// SAMLLabelRuleSpec describes a rule on how to map Identity labels to Omni roles.
//
message SAMLLabelRuleSpec {
  // MatchLabels is the list of labels to match the user's Identity against this rule.
  repeated string match_labels = 1;

  // AssignRoleOnRegistration is the role to be assigned to the user if this rule matches.
  string assign_role_on_registration = 2;
}

message ServiceAccountStatusSpec {
  message PgpPublicKey {
    string id = 1;
    string armored = 2;
    google.protobuf.Timestamp expiration = 3;
  }

  string role = 1;

  repeated PgpPublicKey public_keys = 2;
}

// JoinTokenSpec keeps the node join tokens.
message JoinTokenSpec {
  // ExpirationTime is the lifetime of the token.
  google.protobuf.Timestamp expiration_time = 1;
  // Revoked allows to revoke the token before it expires.
  bool revoked = 2;
  // Name is the human readable join token description.
  string name = 3;
}

// JoinTokenStatusSpec is the status of the join token.
message JoinTokenStatusSpec {
  enum State {
    UNKNOWN = 0;
    ACTIVE = 1;
    REVOKED = 2;
    EXPIRED = 3;
  }

  // State of the token.
  State state = 1;
  // IsDefault is set on the join token which used by default.
  bool is_default = 2;
  // UseCount is the number of links that are using the join token.
  uint64 use_count = 3;
  // ExpirationTime is copied from the JoinTokenSpec.
  google.protobuf.Timestamp expiration_time = 4;
  // Name is copied from the JoinTokenSpec.
  string name = 5;
}

// JoinTokenUsageSpec creates a mapping that connects links and join tokens.
message JoinTokenUsageSpec {
  string token_id = 1;
}

// DefaultJoinTokenSpec is used to mark some join token as the default one.
message DefaultJoinTokenSpec {
  string token_id = 1;
}
